name: Deploy Next.js site to Pages

on:
  push:
    branches: ['master']

  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: 'pages'
  cancel-in-progress: false

jobs:
  test-project:
    name: Test Project
    runs-on: Ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: NPM Install
        run: npm install
      - name: Run Linting
        run: npm run lint
        env:
          CI: true

  build-project:
    runs-on: ubuntu-latest
    needs: test-project
    name: Build Project
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: ${{ steps.detect-package-manager.outputs.manager }}
      - name: Setup Pages
        uses: actions/configure-pages@v4
        with:
          static_site_generator: next
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      - name: Build with Next.js
        run: ${{ steps.detect-package-manager.outputs.runner }} next build
      - name: Upload build
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./build
      - name: Upload static-site
        uses: actions/upload-artifact@v4
        with:
          name: static-site
          path: .next/

  release-project:
    name: Release Project
    runs-on: Ubuntu-latest
    needs: build-project
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: static-site
      - name: Artifact download
        run: ls -R

  deploy-project:
    name: Deploy Project
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build-project
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
